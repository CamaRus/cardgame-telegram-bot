require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const Parse = require('parse/node');

Parse.initialize(process.env.BACK4APP_APP_ID, process.env.BACK4APP_JS_KEY);
Parse.serverURL = process.env.BACK4APP_SERVER_URL;

const bot = new Telegraf(process.env.BOT_TOKEN);

// const bot = new Telegraf(process.env.BOT_TOKEN, {
//   handlerTimeout: 0,
// });

const userSessions = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async function getRandomTheme(excludedTheme = null) {
    try {
        const Themes = Parse.Object.extend('Themes');
        const query = new Parse.Query(Themes);
        if (excludedTheme) {
            query.notEqualTo('theme', excludedTheme);
        }
        const results = await query.find();

        if (results.length === 0) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º';
        return results[Math.floor(Math.random() * results.length)].get('theme');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã:', error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã';
    }
}

bot.start((ctx) => {
    userSessions[ctx.from.id] = { step: null, matchValues: [], mismatchValues: [] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
        [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'create_game')],
        [Markup.button.callback('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'join_game')],
        [Markup.button.callback('–ú–æ–∏ –∏–≥—Ä—ã', 'my_games')]
    ]));
});

// bot.command('list_games', async (ctx) => {
//   const Game = Parse.Object.extend('Games');
//   const query = new Parse.Query(Game);

//   try {
//       const results = await query.find(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã
//       if (results.length === 0) {
//           return ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.');
//       }

//       let message = 'üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä:\n\n';
//       results.forEach((game, index) => {
//           message += `${index + 1}. üÜî ID: ${game.id}\n`;
//           message += `üé≠ –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${game.get('MatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
//           message += `üé≠ –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
//           message += `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${game.get('creatorName') || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n`;
//           message += `üìå –°—Ç–∞—Ç—É—Å: ${game.get('status') || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n`;
//       });

//       ctx.reply(message);
//   } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error.message);
//       ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä.');
//   }
// });

bot.command('my_games', async (ctx) => {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend('Games');

  // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  const query1 = new Parse.Query(Game);
  query1.equalTo('creatorId', userId);

  const query2 = new Parse.Query(Game);
  query2.equalTo('enemyId', userId);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
  const mainQuery = Parse.Query.or(query1, query2);

  try {
      const games = await mainQuery.find();

      if (games.length === 0) {
          return ctx.reply('–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–∞—Ö.');
      }

      for (const game of games) {
          const gameId = game.id;
          const creatorName = game.get('creatorName') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
          const enemyName = game.get('enemyName') || '–û–∂–∏–¥–∞–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞';
          const status = game.get('status') === 'full' ? '‚úÖ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*' : 'üïπ *–í –ø–æ–∏—Å–∫–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞*';

          const message = `üéÆ *–ò–≥—Ä–∞:*\n\nüÜî *ID:* \`${gameId}\`\nüë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\nüé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\nüìå *–°—Ç–∞—Ç—É—Å:* ${status}`;

          await ctx.replyWithMarkdown(message, Markup.inlineKeyboard([
              [Markup.button.callback(`‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É`, `game_${gameId}`)]
          ]));
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});



bot.action('create_game', (ctx) => {
    userSessions[ctx.from.id] = { step: 'choose_theme', matchValues: [], mismatchValues: [] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:', Markup.inlineKeyboard([
        [Markup.button.callback('–°–≤–æ—è —Ç–µ–º–∞', 'custom_theme')],
        [Markup.button.callback('–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞', 'random_theme')]
    ]));
});

bot.action('join_game', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', Markup.inlineKeyboard([
      [Markup.button.callback('–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É', 'enter_game_id')],
      [Markup.button.callback('–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫', 'random_opponent')]
  ]));
});

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É" (–≤–≤–æ–¥ ID)
bot.action('enter_game_id', (ctx) => {
  userSessions[ctx.from.id] = { step: 'enter_game_id' };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:');
});


bot.action('custom_theme', (ctx) => {
  userSessions[ctx.from.id] = { step: 'enter_custom_theme', matchValues: [], mismatchValues: [], isRandom: false };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"
bot.action('random_theme', async (ctx) => {
  const theme = await getRandomTheme();
  userSessions[ctx.from.id] = { 
      step: 'enter_match_values', 
      theme, 
      matchValues: [], 
      mismatchValues: [], 
      isRandom: true  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isRandom = true –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º–µ
  };
  ctx.reply(`–í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞: ${theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
});

bot.on('text', async (ctx) => {
    const session = userSessions[ctx.from.id];
    // if (!session) return;
    if (!session || !session.step) return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start');

    switch (session.step) {
        case 'enter_custom_theme':
            session.theme = ctx.message.text;
            // session.isRandom = false; // –¢–µ–º–∞ –∑–∞–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é
            session.step = 'enter_match_values';
            ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
            break;

            case 'enter_match_values':
            session.matchValues.push(ctx.message.text);
            if (session.matchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
            } else {
                if (session.isRandom) {
                  // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –∏–∑ –±–∞–∑—ã, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ–∂–µ –∏–∑ –±–∞–∑—ã
                  session.mismatchTheme = await getRandomTheme(session.theme);
                  session.step = 'enter_mismatch_values';
                  ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.mismatchTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
                } else {
                  // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —É –Ω–µ–≥–æ
                  session.step = 'enter_new_custom_theme';
                  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
              }
            }
            break;

        case 'enter_new_custom_theme':
            session.mismatchTheme = ctx.message.text;
            session.step = 'enter_mismatch_values';
            ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.mismatchTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
            break;

        case 'enter_mismatch_values':
            session.mismatchValues.push(ctx.message.text);
            if (session.mismatchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.mismatchValues.length + 1}/6):`);
            } else {
                const Game = Parse.Object.extend('Games');
                const game = new Game();
                game.set('MatchTheme', session.theme);
                game.set('MismatchTheme', session.mismatchTheme);
                game.set('MatchValuesCreator', session.matchValues);
                game.set('MismatchValuesCreator', session.mismatchValues);
                game.set('creatorId', ctx.from.id);
                game.set('creatorName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º'); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                game.set('status', 'waiting');
                await game.save();
                
                ctx.reply('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                delete userSessions[ctx.from.id];
            }
            break;

            case 'enter_game_id':
              const gameId = ctx.message.text;
              const Game = Parse.Object.extend('Games');
              const query = new Parse.Query(Game);
          
              try {
                  const game = await query.get(gameId);
                  const creatorId = game.get('creatorId');
                  const enemyId = game.get('enemyId');
          
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
                  if (creatorId === ctx.from.id || enemyId === ctx.from.id) {
                      return ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!');
                  }
          
                  session.game = game;
                  session.theme = game.get('MatchTheme');
                  session.alternateTheme = game.get('MismatchTheme');
                  session.matchValues = [];
                  session.mismatchValues = [];
                  session.step = 'enter_match_values_enemy';
          
                  ctx.reply(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
              } catch (error) {
                  ctx.reply('–¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.');
              }
              break;

            case 'enter_match_values_enemy':
            session.matchValues.push(ctx.message.text);
            if (session.matchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
            } else {
                session.step = 'enter_mismatch_values_enemy';
                ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.alternateTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
            }
            break;

            case 'enter_mismatch_values_enemy':
              session.mismatchValues.push(ctx.message.text);
              if (session.mismatchValues.length < 6) {
                  ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.mismatchValues.length + 1}/6):`);
              } else {
                  session.step = 'enter_rate_enemy';
                  ctx.reply('–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12):');
              }
              break;

              case 'enter_rate_enemy':
              const rate = parseInt(ctx.message.text);
    
              if (isNaN(rate) || rate < 0 || rate > 12) {
                  return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12:');
              }

              const game = session.game;
              game.set('matchValuesEnemy', session.matchValues);
              game.set('mismatchValuesEnemy', session.mismatchValues);
              game.set('enemyId', ctx.from.id);
              game.set('enemyName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º');
              game.set('rateEnemy', rate);
              game.set('status', 'full');

              await game.save();
              
              ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${rate}. –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!`);
              delete userSessions[ctx.from.id];
              break;

                  default:
                      ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
              }
});

// bot.telegram.deleteWebhook();
// bot.startPolling();
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
