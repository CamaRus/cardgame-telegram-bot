require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
// const { Telegraf, Markup } = require('telegraf');
// const { session } = require('@telegraf/session');

// const markdownTable = require('markdown-table');
// import {markdownTable} from 'markdown-table';
const Parse = require('parse/node');

Parse.initialize(process.env.BACK4APP_APP_ID, process.env.BACK4APP_JS_KEY);
Parse.serverURL = process.env.BACK4APP_SERVER_URL;

const bot = new Telegraf(process.env.BOT_TOKEN);


const userSessions = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async function getRandomTheme(excludedTheme = null) {
    try {
        const Themes = Parse.Object.extend('Themes');
        const query = new Parse.Query(Themes);
        if (excludedTheme) {
            query.notEqualTo('theme', excludedTheme);
        }
        const results = await query.find();

        if (results.length === 0) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º';
        return results[Math.floor(Math.random() * results.length)].get('theme');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã:', error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã';
    }
}

bot.start((ctx) => {
    userSessions[ctx.from.id] = { step: null, matchValues: [], mismatchValues: [] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
        [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'create_game')],
        [Markup.button.callback('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'join_game')],
        [Markup.button.callback('–ú–æ–∏ –∏–≥—Ä—ã', 'my_games')]
    ]));
});

async function myGamesCommand(ctx) {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend('Games');

  // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∏–≥—Ä, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å creatorId –∏–ª–∏ enemyId
  const query1 = new Parse.Query(Game);
  query1.equalTo('creatorId', userId);

  const query2 = new Parse.Query(Game);
  query2.equalTo('enemyId', userId);

  const mainQuery = Parse.Query.or(query1, query2);

  try {
      const games = await mainQuery.find();
      if (games.length === 0) {
          return ctx.reply('–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–∞—Ö.');
      }

      for (const game of games) {
          const gameId = game.id;
          const creatorName = game.get('creatorName') || '–ê–Ω–æ–Ω–∏–º';
          const creatorId = game.get('creatorId');
          const enemyName = game.get('enemyName') || '';
          const status = game.get('status');

          let statusText = 'üïπ –í –ø–æ–∏—Å–∫–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞';
          if (status === 'full' && userId === creatorId) statusText = '‚è≥ –í–∞—à —Ö–æ–¥';
          if (status === 'full' && userId !== creatorId) statusText = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ';
          if (status === 'working' && userId === creatorId) statusText = 'üéØ –í–∞—à —Ö–æ–¥';
          if (status === 'working' && userId !== creatorId) statusText = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ';
          if (status === 'finish') statusText = '‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';

          const message = `üéÆ *–ò–≥—Ä–∞:*\n\nüÜî *ID:* \`${gameId}\`\nüë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\nüé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\nüìå *–°—Ç–∞—Ç—É—Å:* ${statusText}`;

          await ctx.replyWithMarkdown(message, Markup.inlineKeyboard([
              [Markup.button.callback('‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', `game_${gameId}`)]
          ]));
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É `/my_games`
bot.command('my_games', myGamesCommand);
// bot.action('my_games', myGamesCommand);
bot.action('my_games', (myGamesCommand));


bot.action('create_game', (ctx) => {
  userSessions[ctx.from.id] = { step: 'choose_theme', matchValues: [], mismatchValues: [] };
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:', Markup.inlineKeyboard([
      [Markup.button.callback('–°–≤–æ—è —Ç–µ–º–∞', 'custom_theme')],
      [Markup.button.callback('–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞', 'random_theme')]
  ]));
});

bot.action('join_game', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', Markup.inlineKeyboard([
      [Markup.button.callback('–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É', 'enter_game_id')],
      [Markup.button.callback('–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫', 'random_opponent')]
  ]));
});

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É" (–≤–≤–æ–¥ ID)
bot.action('enter_game_id', (ctx) => {
  userSessions[ctx.from.id] = { step: 'enter_game_id' };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:');
});


bot.action('custom_theme', (ctx) => {
  userSessions[ctx.from.id] = { step: 'enter_custom_theme', matchValues: [], mismatchValues: [], isRandom: false };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"
bot.action('random_theme', async (ctx) => {
  const theme = await getRandomTheme();
  userSessions[ctx.from.id] = { 
      step: 'enter_match_values', 
      theme, 
      matchValues: [], 
      mismatchValues: [], 
      isRandom: true  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isRandom = true –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º–µ
  };
  const message =
                `–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
                `<b>${theme}</b>\n` +
                `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `;

            await ctx.reply(message, { parse_mode: 'HTML' });

  // ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
});

bot.action('random_opponent', async (ctx) => {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);

  try {
      // üîπ –ü–æ–∏—Å–∫ –∏–≥—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º waiting, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
      query.equalTo('status', 'waiting');
      query.notEqualTo('creatorId', userId);
      query.doesNotExist('enemyId');
      query.limit(1);

      const availableGames = await query.find();

      if (availableGames.length === 0) {
          return ctx.reply('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é.');
      }

      const game = availableGames[0];
      // game.set('enemyId', userId);
      // game.set('enemyName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º');
      // game.set('status', 'full');
      // await game.save();

      userSessions[userId] = {
          step: 'enter_match_values_enemy',
          game,
          theme: game.get('MatchTheme'),
          alternateTheme: game.get('MismatchTheme'),
          matchValues: [],
          mismatchValues: [],
      };
      const message =
                `üéÆ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º!\n` +
                `üìå –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: \n`
                `<b>${game.get('MatchTheme')}</b>\n` +
                `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `;
      // ctx.reply(`üéÆ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º!\n\nüìå –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${game.get('MatchTheme')}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
      await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã:', error);
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});


bot.action(/^game_(.+)$/, async (ctx) => {
  // ‚úÖ –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
  // ctx.answerCbQuery().catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ answerCbQuery:', err));

  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);

  try {
      const game = await query.get(gameId);
      if (!game) {
          return ctx.answerCbQuery('‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { show_alert: true });
      }

      const creatorId = game.get('creatorId');
      const creatorName = (game.get('creatorName') || '–ê–Ω–æ–Ω–∏–º').replace(/[-._]/g, '\\$&');
      const enemyName = (game.get('enemyName') || '–û–∂–∏–¥–∞–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞').replace(/[-._]/g, '\\$&');
      const status = game.get('status');
      const enemyId = game.get('enemyId');

      if (status === 'waiting' && userId !== creatorId) {
        return ctx.answerCbQuery('üïπ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ...', { show_alert: true });
    }

      else if (status === 'waiting' && userId === creatorId) {
          return ctx.answerCbQuery('üïπ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...', { show_alert: true });
      } else 

      if (userId === creatorId && status === "full") {
          const matchTheme = (game.get('MatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞').replace(/[-._]/g, '\\$&');
          const matchValuesCreator = (game.get('MatchValuesCreator') || []).map(v => v.replace(/[-._]/g, '\\$&'));
          const mismatchTheme = (game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞').replace(/[-._]/g, '\\$&');
          const mismatchValuesCreator = (game.get('MismatchValuesCreator') || []).map(v => v.replace(/[-._]/g, '\\$&'));
          const rateCreator = (game.get('rateCreator') || '–ù–µ —Å–¥–µ–ª–∞–Ω–∞').toString().replace(/[-._]/g, '\\$&');

          ctx.answerCbQuery('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', { show_alert: false });

          const message =
              `üéÆ *–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:*\n\n` +
              `üÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\n` +
              `üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\n` +
              `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\n` +
              // `‚öñÔ∏è *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:* ${rateCreator}\n\n` +
              `üìå –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *${matchTheme}\n*` +
              `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
              `üìã *–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è:*\n` +
              matchValuesCreator.map((v, i) => `${i + 1}\\.\ ${v}`).join('\n') + '\n\n' +
              `üìå –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *${mismatchTheme}\n*` +
              `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
              `üìã *–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è:*\n` +
              mismatchValuesCreator.map((v, i) => `${i + 1}\\.\ ${v}`).join('\n');

              await ctx.replyWithMarkdownV2(message, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data: `bet_${gameId}` }]
                    ]
                }
            });
          } else if (userId === creatorId && status === "working") {
            const theme1 = game.get('MatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            const theme2 = game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            const matchValuesCreator = game.get('MatchValuesCreator') || [];
            const mismatchValuesCreator = game.get('MismatchValuesCreator') || [];
            const matchValuesEnemy = game.get('matchValuesEnemy') || [];
            const mismatchValuesEnemy = game.get('mismatchValuesEnemy') || [];
            const rateCreator = game.get('rateCreator') || '–ù–µ —Å–¥–µ–ª–∞–Ω–∞';
            const rateEnemy = game.get('rateEnemy') || '–ù–µ —Å–¥–µ–ª–∞–Ω–∞';

            ctx.answerCbQuery('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', { show_alert: false });

            const message =
                `üéÆ <b>–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n` +
                `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
                `üë§ <b>–°–æ–ø–µ—Ä–Ω–∏–∫:</b> ${enemyName}\n` +
                `<b>–ò–≥—Ä–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b> ${theme1}\n` +
                `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +

                `<b>–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n` +
                matchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +

                `<b>–ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b>\n` +
                matchValuesEnemy.map((v, i) => `${i + 1}. ${v || '-'}`).join('\n') + '\n\n';

            await ctx.reply(message, { parse_mode: 'HTML' });

            // üîπ –ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            userSessions[userId] = {
              step: 'enter_coincidences_match',
              gameId,
              theme: theme1,
              coincidences: [],
              matchValuesCreator,
              matchValuesEnemy,
          };

          await ctx.reply(
            `–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã: <b>${theme1}</b>\n\n`,
            {
                parse_mode: 'HTML'
            }
        );
        
        await ctx.reply(
            '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥:',
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨', `finish_match_${gameId}`)]
            ])
        );
          
      } else if (status === 'finish') {
        const theme1 = game.get('MatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            const theme2 = game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            const matchValuesCreator = game.get('MatchValuesCreator') || [];
            const mismatchValuesCreator = game.get('MismatchValuesCreator') || [];
            const matchValuesEnemy = game.get('matchValuesEnemy') || [];
            const mismatchValuesEnemy = game.get('mismatchValuesEnemy') || [];
            const coincidences = game.get('coincidences') || { match: [], mismatch: [] };
            const rateCreator = (game.get('rateCreator') || 0) + (creatorId === userId ? ' (–≤—ã)' : '');
            const rateEnemy = (game.get('rateEnemy') || 0) + (enemyId === userId ? ' (–≤—ã)' : '');
            const winnerName = game.get('winnerName') ? `${game.get('winnerName')}${game.get('winnerId') === userId ? ' (–≤—ã)' : ''}` : 'ü§ù –ù–∏—á—å—è!';

            const message =
                `üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:</b>\n\n` +
                `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
                `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                `üìå <b>–ò–≥—Ä–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b>\n` + 
                `${theme1}\n\n` +
                `üìù <b>${creatorName}:</b>\n` +
                matchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +

                `üìù <b>${enemyName}:</b>\n` +
                matchValuesEnemy.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +
                
                `üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n` +
                (coincidences.match.length > 0 ? coincidences.match.join(', ') : '‚Äî') + '\n' +
                `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                `üìå <b>–ò–≥—Ä–∞ –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b>\n` + 
                `${theme2}\n\n` +
                `üìù <b>${creatorName}:</b>\n` +
                mismatchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +

                `üìù <b>${enemyName}:</b>\n` +
                mismatchValuesEnemy.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +

                `üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n` +
                (coincidences.mismatch.length > 0 ? coincidences.mismatch.join(', ') : '‚Äî') + '\n' +
                  `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                `‚öñÔ∏è <b>–°—Ç–∞–≤–∫–∞ –≤–µ–¥—É—â–µ–≥–æ:</b> ${rateCreator}\n` +
                `‚öñÔ∏è <b>–°—Ç–∞–≤–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b> ${rateEnemy}\n` +
                  `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
                `üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winnerName}`;

            await ctx.reply(message, { parse_mode: 'HTML' });
      } else if (userId !== creatorId && status === "full") {
        ctx.answerCbQuery('üéÆ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!..', { show_alert: true });
      } else if (status === 'working' && userId !== creatorId) {
        ctx.answerCbQuery('üéÆ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!..', { show_alert: true });
      }
      
      else  {
          ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∏–≥—Ä—ã.', { show_alert: true });
      }
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
});

bot.action(/^bet_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;

  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);

  try {
      const game = await query.get(gameId);
      if (!game) return ctx.answerCbQuery('‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { show_alert: true });

      if (game.get('creatorId') !== userId) {
          return ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∏–≥—Ä—ã.', { show_alert: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å—Ç–∞–≤–∫–∏
      userSessions[userId] = { step: 'enter_rate_creator', game };
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12):');
      ctx.answerCbQuery();
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞–≤–∫–∏:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
});


// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–æ–Ω—á–∏—Ç—å" –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã (—Ñ–∏–Ω–∞–ª)
// bot.action(/^finish_mismatch_(.+)$/, async (ctx) => {
//   const gameId = ctx.match[1];
//   const userId = ctx.from.id;
//   const session = userSessions[userId];

//   if (!session || session.gameId !== gameId) return;

//   // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã
//   const game = new Parse.Query('Games');
//   const gameObj = await game.get(gameId);
//   if (!gameObj) return ctx.reply('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

//   gameObj.set('coincidences', {
//       match: session.matchCoincidences || [],
//       mismatch: session.coincidences || [],
//   });
//   gameObj.set('status', 'finish');
//   await gameObj.save();

//   delete userSessions[userId];

//   ctx.reply('‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
//   return myGamesCommand(ctx);
// });


bot.action(/^finish_match_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session || session.gameId !== gameId) return;

  session.matchCoincidences = [...session.coincidences]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã
  session.coincidences = []; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã
  session.step = 'enter_coincidences_mismatch';

  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);
  const game = await query.get(gameId);
  if (!game) return ctx.reply('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

  // üîπ –î–∞–Ω–Ω—ã–µ –ø–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–º–µ
  const theme2 = game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  const mismatchValuesCreator = game.get('MismatchValuesCreator') || [];
  const mismatchValuesEnemy = game.get('mismatchValuesEnemy') || [];

  ctx.answerCbQuery('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', { show_alert: false });

  const message =
      `üéÆ <b>–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n` +
      `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
      `<b>–ò–≥—Ä–∞ –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b> ${theme2}\n` +
      `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
      `<b>–í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n` +
      mismatchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join('\n') + '\n\n' +
      `<b>–ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b>\n` +
      mismatchValuesEnemy.map((v, i) => `${i + 1}. ${v || '-'}`).join('\n') + '\n\n';

  await ctx.reply(message, { parse_mode: 'HTML' });

  await ctx.reply(
        `–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã: <b>${theme2}</b>\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥:`,
        {
            parse_mode: 'HTML'
        }
    );
    
    await ctx.reply(
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥:',
        Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨', `finish_mismatch_${gameId}`)]
        ])
    );

});

bot.action(/^finish_mismatch_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session || session.gameId !== gameId) return;

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã
  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);
  const gameObj = await query.get(gameId);
  if (!gameObj) return ctx.reply('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

  // üîπ –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const totalCoincidences = (session.matchCoincidences.length || 0) + (session.coincidences.length || 0);
  
  // üîπ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
  const rateEnemy = gameObj.get('rateEnemy') || 0;
  const rateCreator = gameObj.get('rateCreator') || 0;

  // üîπ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const resultEnemy = (rateEnemy <= totalCoincidences) ? rateEnemy : 0;
  const resultCreator = (rateCreator <= totalCoincidences) ? rateCreator : 0;

  // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  let winnerId = null;
  let winnerName = null;

  if (resultCreator > resultEnemy) {
      winnerId = gameObj.get('creatorId');
      winnerName = gameObj.get('creatorName');
  } else if (resultEnemy > resultCreator) {
      winnerId = gameObj.get('enemyId');
      winnerName = gameObj.get('enemyName');
  }

  // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
  gameObj.set('coincidences', {
      match: session.matchCoincidences || [],
      mismatch: session.coincidences || [],
      total: totalCoincidences
  });
  gameObj.set('resultCreator', resultCreator);
  gameObj.set('resultEnemy', resultEnemy);
  gameObj.set('winnerId', winnerId);
  gameObj.set('winnerName', winnerName);
  gameObj.set('status', 'finish');

  await gameObj.save();
  delete userSessions[userId];

  // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
  let winnerText = winnerName ? `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: *${winnerName}*` : 'ü§ù –ù–∏—á—å—è!';
  // ctx.replyWithMarkdown(
  //     `‚úÖ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n` +
  //     `üéØ *–°–æ–≤–ø–∞–¥–µ–Ω–∏–π:* ${totalCoincidences}\n\n` +
  //     `üë§ *${gameObj.get('creatorName')}:* ${resultCreator} –æ—á–∫.\n` +
  //     `üë§ *${gameObj.get('enemyName')}:* ${resultEnemy} –æ—á–∫.\n\n` +
  //     winnerText
  // );

  await ctx.reply(
    `‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${totalCoincidences}\n\n` +
      `üë§ ${gameObj.get('creatorName')}: ${resultCreator} –æ—á–∫.\n` +
      `üë§ ${gameObj.get('enemyName')}: ${resultEnemy} –æ—á–∫.\n\n` +
      winnerText
);

  return myGamesCommand(ctx);
});




bot.on('text', async (ctx) => {
  const session = userSessions[ctx.from.id];
    if (!session) return;
    if (!session || !session.step) return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
  // üîπ –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  switch (session.step) {
      case 'enter_custom_theme':
          session.theme = ctx.message.text;
          session.step = 'enter_match_values';
          ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
          break;

      case 'enter_match_values':
          session.matchValues.push(ctx.message.text);
          // if (session.matchValues.length < 6) {
          //     ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
          // } 
          // else {
          //     session.step = 'enter_new_custom_theme';
          //     ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
          // }
          if (session.matchValues.length < 6) {
            ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
        } else {
            if (session.isRandom) {
              // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –∏–∑ –±–∞–∑—ã, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ–∂–µ –∏–∑ –±–∞–∑—ã
              session.alternateTheme = await getRandomTheme();
              session.step = 'enter_mismatch_values';
              // ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.alternateTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
              const message =
                `–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
                `<b>${session.alternateTheme}</b>\n` +
                `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `;

            await ctx.reply(message, { parse_mode: 'HTML' });
            } else {
              // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —É –Ω–µ–≥–æ
              session.step = 'enter_new_custom_theme';
              ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
          }
        }
          break;

      case 'enter_new_custom_theme':
          session.alternateTheme = ctx.message.text;
          session.step = 'enter_mismatch_values';
          ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.alternateTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
          break;

      case 'enter_mismatch_values':
          session.mismatchValues.push(ctx.message.text);
          if (session.mismatchValues.length < 6) {
              ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.mismatchValues.length + 1}/6):`);
          } else {
              const Game = Parse.Object.extend('Games');
              const game = new Game();
              game.set('MatchTheme', session.theme);
              game.set('MismatchTheme', session.alternateTheme);
              game.set('MatchValuesCreator', session.matchValues);
              game.set('MismatchValuesCreator', session.mismatchValues);
              game.set('creatorId', ctx.from.id);
              game.set('creatorName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º');
              game.set('status', 'waiting');
              await game.save();
              ctx.reply(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: \`${game.id}\``);
              // session = null;
              delete userSessions[ctx.from.id];
          }
          break;

          case 'enter_game_id':
              const gameId = ctx.message.text;
              const Game = Parse.Object.extend('Games');
              const query = new Parse.Query(Game);
          
              try {
                  const game = await query.get(gameId);
                  const creatorId = game.get('creatorId');
                  const enemyId = game.get('enemyId');
          
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
                  if (creatorId === ctx.from.id || enemyId === ctx.from.id) {
                      return ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                  }
          
                  session.game = game;
                  session.theme = game.get('MatchTheme');
                  session.alternateTheme = game.get('MismatchTheme');
                  session.matchValues = [];
                  session.mismatchValues = [];
                  session.step = 'enter_match_values_enemy';
                  

                  // ctx.reply(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
                  const message =
                  `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!\n` + 
                `–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
                `<b>${session.theme}</b>\n` +
                `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `;

            await ctx.reply(message, { parse_mode: 'HTML' });
              } catch (error) {
                  ctx.reply('–¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.');
              }
              break;

            case 'enter_match_values_enemy':
            session.matchValues.push(ctx.message.text);
            if (session.matchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
            } else {
                session.step = 'enter_mismatch_values_enemy';
                // ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.alternateTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
                const message =
                `–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
                `<b>${session.alternateTheme}</b>\n` +
                `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `;

            await ctx.reply(message, { parse_mode: 'HTML' });
            }
            break;

            case 'enter_mismatch_values_enemy':
              session.mismatchValues.push(ctx.message.text);
              if (session.mismatchValues.length < 6) {
                  ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.mismatchValues.length + 1}/6):`);
              } else {
                  session.step = 'enter_rate_enemy';
                  ctx.reply('–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12):');
              }
              break;

              case 'enter_rate_enemy':
              const rate = parseInt(ctx.message.text);
    
              if (isNaN(rate) || rate < 0 || rate > 12) {
                  return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12:');
              }

              const game = session.game;
              game.set('matchValuesEnemy', session.matchValues);
              game.set('mismatchValuesEnemy', session.mismatchValues);
              game.set('enemyId', ctx.from.id);
              game.set('enemyName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º');
              game.set('rateEnemy', rate);
              game.set('status', 'full');

              await game.save();
              
              ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${rate}. –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!`);
              delete userSessions[ctx.from.id];
              break;

              case 'enter_rate_creator': // üîπ –õ–û–ì–ò–ö–ê –°–¢–ê–í–ö–ò –î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø
            const rateCreator = parseInt(ctx.message.text);
            if (isNaN(rateCreator) || rateCreator < 0 || rateCreator > 12) {
                return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12:');
            }

            const gameCreator = session.game;
            gameCreator.set('rateCreator', rateCreator);
            gameCreator.set('status', 'working'); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
            await gameCreator.save();

            ctx.reply(`‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${rateCreator} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
            delete userSessions[ctx.from.id];

            // üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
            return myGamesCommand(ctx);
            break;

            // üîπ –í–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø–µ—Ä–≤–æ–π —Ç–µ–º–µ
        case 'enter_coincidences_match':
          // if (!session.matchValuesCreator.includes(ctx.message.text) || 
          //     !session.matchValuesEnemy.includes(ctx.message.text)) {
          //     return ctx.reply('‚ùå –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ:');
          // }

          session.coincidences.push(ctx.message.text);
          await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ctx.message.text}`);
          // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å"

    await ctx.reply(
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥:',
      Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨', `finish_match_${session.gameId}`)]
      ])
  );
  
          break;

      // üîπ –í–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–º–µ
      case 'enter_coincidences_mismatch':
          // if (!session.mismatchValuesCreator.includes(ctx.message.text) || 
          //     !session.mismatchValuesEnemy.includes(ctx.message.text)) {
          //     return ctx.reply('‚ùå –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ:');
          // }

          session.coincidences.push(ctx.message.text);
          await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ctx.message.text}`);

          await ctx.reply(
            '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥:',
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨', `finish_mismatch_${session.gameId}`)]
            ])
        );
          break;
                  default:
                      ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
              }
});

// bot.telegram.deleteWebhook();
// bot.startPolling();


bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
