require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const Parse = require('parse/node');

Parse.initialize(process.env.BACK4APP_APP_ID, process.env.BACK4APP_JS_KEY);
Parse.serverURL = process.env.BACK4APP_SERVER_URL;

const bot = new Telegraf(process.env.BOT_TOKEN);

// const bot = new Telegraf(process.env.BOT_TOKEN, {
//   handlerTimeout: 0,
// });

const userSessions = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async function getRandomTheme(excludedTheme = null) {
    try {
        const Themes = Parse.Object.extend('Themes');
        const query = new Parse.Query(Themes);
        if (excludedTheme) {
            query.notEqualTo('theme', excludedTheme);
        }
        const results = await query.find();

        if (results.length === 0) return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º';
        return results[Math.floor(Math.random() * results.length)].get('theme');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã:', error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã';
    }
}

bot.start((ctx) => {
    userSessions[ctx.from.id] = { step: null, matchValues: [], mismatchValues: [] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
        [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'create_game')],
        [Markup.button.callback('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'join_game')],
        [Markup.button.callback('–ú–æ–∏ –∏–≥—Ä—ã', 'my_games')]
    ]));
});

bot.action('create_game', (ctx) => {
    userSessions[ctx.from.id] = { step: 'choose_theme', matchValues: [], mismatchValues: [] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:', Markup.inlineKeyboard([
        [Markup.button.callback('–°–≤–æ—è —Ç–µ–º–∞', 'custom_theme')],
        [Markup.button.callback('–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞', 'random_theme')]
    ]));
});

bot.use((ctx, next) => {
  console.log(`Message from: ${ctx.from.id}`);
  return next();
});

// bot.action('custom_theme', (ctx) => {
//     userSessions[ctx.from.id].step = { step: 'enter_custom_theme', isRandom: false };
//     ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
// });

bot.action('custom_theme', (ctx) => {
  userSessions[ctx.from.id] = { step: 'enter_custom_theme', matchValues: [], mismatchValues: [], isRandom: false };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
});

// bot.action('random_theme', async (ctx) => {
//     const theme = await getRandomTheme();
//     userSessions[ctx.from.id] = { step: 'enter_match_values', theme, matchValues: [], mismatchValues: [] };
//     ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"
bot.action('random_theme', async (ctx) => {
  const theme = await getRandomTheme();
  userSessions[ctx.from.id] = { 
      step: 'enter_match_values', 
      theme, 
      matchValues: [], 
      mismatchValues: [], 
      isRandom: true  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isRandom = true –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º–µ
  };
  ctx.reply(`–í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞: ${theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
});

// bot.on('message', (ctx) => {
//   console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID: ${ctx.from.id}, Username: ${ctx.from.username}`);
// });

bot.on('message', (ctx) => {
  console.log(ctx.message);  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
});



bot.on('text', async (ctx) => {
    const session = userSessions[ctx.from.id];
    // session.isRandom = true;
    if (!session) return;

    switch (session.step) {
        case 'enter_custom_theme':
            session.theme = ctx.message.text;
            // session.isRandom = false; // –¢–µ–º–∞ –∑–∞–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é
            session.step = 'enter_match_values';
            ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.theme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
            break;

        // case 'enter_match_values':
        //     session.matchValues.push(ctx.message.text);
        //     if (session.matchValues.length < 6) {
        //         ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
        //     } else {
        //         if (session.theme === 'random') {
        //             const newTheme = await getRandomTheme(session.theme);
        //             session.mismatchTheme = newTheme;
        //             session.step = 'enter_mismatch_values';
        //             ctx.reply(`–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞: ${newTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
        //         } else {
        //             session.step = 'enter_new_custom_theme';
        //             ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:');
        //         }
        //     }
        //     break;

            case 'enter_match_values':
            session.matchValues.push(ctx.message.text);
            if (session.matchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.matchValues.length + 1}/6):`);
            } else {
                if (session.isRandom) {
                  // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –∏–∑ –±–∞–∑—ã, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ–∂–µ –∏–∑ –±–∞–∑—ã
                  session.mismatchTheme = await getRandomTheme(session.theme);
                  session.step = 'enter_mismatch_values';
                  ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.mismatchTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
                } else {
                  // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —É –Ω–µ–≥–æ
                  session.step = 'enter_new_custom_theme';
                  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:');
              }
            }
            break;

        case 'enter_new_custom_theme':
            session.mismatchTheme = ctx.message.text;
            session.step = 'enter_mismatch_values';
            ctx.reply(`–¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${session.mismatchTheme}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
            break;

        case 'enter_mismatch_values':
            session.mismatchValues.push(ctx.message.text);
            if (session.mismatchValues.length < 6) {
                ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (${session.mismatchValues.length + 1}/6):`);
            } else {
                const Game = Parse.Object.extend('Games');
                const game = new Game();
                game.set('MatchTheme', session.theme);
                game.set('MismatchTheme', session.mismatchTheme);
                game.set('MatchValuesCreator', session.matchValues);
                game.set('MismatchValuesCreator', session.mismatchValues);
                game.set('chatId', ctx.from.id);
                game.set('creatorName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º'); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                game.set('status', 'waiting');
                await game.save();
                
                ctx.reply('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                delete userSessions[ctx.from.id];
            }
            break;

        default:
            ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
    }
});

// bot.telegram.deleteWebhook();
// bot.startPolling();
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ'));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
