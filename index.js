require("dotenv").config();
const { Telegraf, Markup, session } = require("telegraf");
const Parse = require("parse/node");

Parse.initialize(process.env.BACK4APP_APP_ID, process.env.BACK4APP_JS_KEY);
Parse.serverURL = process.env.BACK4APP_SERVER_URL;

const bot = new Telegraf(process.env.BOT_TOKEN);

const userSessions = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

function escapeMarkdown(text) {
  return text.replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
}

function escapeMarkdownV2(text) {
  return text.replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
}


async function getRandomTheme(excludedTheme = null) {
  try {
    const Themes = Parse.Object.extend("Themes");
    const query = new Parse.Query(Themes);
    if (excludedTheme) {
      query.notEqualTo("theme", excludedTheme);
    }
    const results = await query.find();

    if (results.length === 0) return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º";
    return results[Math.floor(Math.random() * results.length)].get("theme");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º—ã:", error);
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã";
  }
}


async function displayGames(ctx, statusFilter = null) {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend("Games");

  const query1 = new Parse.Query(Game);
  query1.equalTo("creatorId", userId);

  const query2 = new Parse.Query(Game);
  query2.equalTo("enemyId", userId);

  const mainQuery = Parse.Query.or(query1, query2);
  if (statusFilter) {
    mainQuery.equalTo("status", statusFilter);
    mainQuery.descending("createdAt");
    mainQuery.limit(10);
  } else {
    mainQuery.notEqualTo("status", "finish");
    mainQuery.descending("createdAt");
  }

  try {
    const games = await mainQuery.find();
    if (games.length === 0) {
      return ctx.reply("‚ö†Ô∏è –ù–µ—Ç –∏–≥—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.");
    }

    for (const game of games) {
      const gameId = game.id;
      const creatorName = game.get("creatorName").replace(
        /[-._]/g,
        "\\$&"
      ) || "–ê–Ω–æ–Ω–∏–º";
      const creatorId = game.get("creatorId");
      const enemyName = game.get("enemyName");
      const status = game.get("status");
    const createdAt = game.get('createdAt').toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',  // üîπ –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
    });
      const matchTheme = game.get("MatchTheme").replace(
        /[-._]/g,
        "\\$&"
      );
      const mismatchTheme = game.get("MismatchTheme").replace(
        /[-._]/g,
        "\\$&"
      );

      let statusText = "‚è≥ –í –ø–æ–∏—Å–∫–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞";

      if (status === "full" && userId === creatorId) statusText = "üéØ –í–∞—à —Ö–æ–¥";
      if (status === "full" && userId !== creatorId)
        statusText = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ";
      if (status === "working" && userId === creatorId)
        statusText = "üéØ –í–∞—à —Ö–æ–¥";
      if (status === "working" && userId !== creatorId)
        statusText = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ";
      if (status === "finish") statusText = "‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";

      const message =
        `üéÆ *–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:*\n\n` +
        `üÜî *ID:* \`${gameId}\`\n` +
        `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${createdAt}\n` +
        `üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\n` +
        (typeof enemyName !== 'undefined' ? `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName.replace(
          /[-._]/g,
          "\\$&"
        )}\n` : '') +
        // `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\n` +
        `üìå *–°—Ç–∞—Ç—É—Å:* ${statusText}`;

      const message2 =
        `üéÆ *–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:*\n\n` +
        `üÜî *ID:* \`${gameId}\`\n` +
        `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${createdAt}\n` +
        `üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\n` +
        // `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\n` +
        (typeof enemyName !== 'undefined' ? `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName.replace(
          /[-._]/g,
          "\\$&"
        )}\n` : '') +
        `üìë *–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:* ${matchTheme}\n` +
        `üìë *–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:* ${mismatchTheme}\n` +
        `üìå *–°—Ç–∞—Ç—É—Å:* ${statusText}`;

        let buttons = [[Markup.button.callback('‚ñ∂Ô∏è –û–¢–ö–†–´–¢–¨ –ò–ì–†–£', `game_${gameId}`)]];

      if (status !== "finish" && userId !== creatorId) {
        await ctx.replyWithMarkdown(
          message2,
          Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –û–¢–ö–†–´–¢–¨ –ò–ì–†–£", `game_${gameId}`)],
          ])
        );
      } 
      // üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì —Å–æ–∑–¥–∞—Ç–µ–ª—å
      else if (status !== "finish" && userId === creatorId) {
        buttons.push([Markup.button.callback('üóë –£–î–ê–õ–ò–¢–¨', `delete_${gameId}`)]);
        await ctx.replyWithMarkdown(message2, Markup.inlineKeyboard(buttons));
    }
      else {
        await ctx.replyWithMarkdown(
          message,
          Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´", `game_${gameId}`)],
          ])
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function finishMatch(ctx, gameId) {
    const userId = ctx.from.id;
    const session = userSessions[userId];

    if (!session || session.gameId !== gameId) return;

    session.matchCoincidences = [...session.coincidences]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã
    session.coincidences = []; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã
    session.step = 'enter_coincidences_mismatch';

    const Game = Parse.Object.extend('Games');
    const query = new Parse.Query(Game);
    const game = await query.get(gameId);
    if (!game) return ctx.reply('–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    // üîπ –î–∞–Ω–Ω—ã–µ –ø–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–º–µ
    const theme2 = game.get('MismatchTheme') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    const mismatchValuesCreator = game.get('MismatchValuesCreator') || [];
    const mismatchValuesEnemy = game.get('mismatchValuesEnemy') || [];
    const enemyName = game.get("enemyName");

    const message =
    `üéÆ <b>–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n` +
    `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
    `üë§ <b>–°–æ–ø–µ—Ä–Ω–∏–∫:</b> ${enemyName}\n` +
    `üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b> ${theme2}\n` +
    `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
    `<b>–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n` +
    mismatchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join("\n") +
    "\n\n" +
    `<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b>\n` +
    mismatchValuesEnemy.map((v, i) => `${i + 1}. ${v || "-"}`).join("\n") +
    "\n\n";

  await ctx.reply(message, { parse_mode: "HTML" });

  await ctx.reply(
    `–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É) –¥–ª—è —Ç–µ–º—ã: <b>${theme2}</b>\n\n`,
    {
      parse_mode: "HTML",
    }
  );

  await ctx.reply(
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ) –Ω–µ—Ç!",
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨", `finish_mismatch_${gameId}`)],
    ])
  );
}

async function finishMismatch(ctx, gameId) {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session || session.gameId !== gameId) return;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã
  const Game = Parse.Object.extend("Games");
const query = new Parse.Query(Game);
const gameObj = await query.get(gameId);
if (!gameObj) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
  // –ó–∞–≥—Ä—É–∂–∞–µ–º matchCoincidences –∏–∑ –±–∞–∑—ã
  const coincidences = gameObj.get("coincidences") || { match: [], mismatch: [] };
  coincidences.match = coincidences.match || [];
  coincidences.mismatch = session.coincidences; // –°–æ—Ö—Ä–∞–Ω—è–µ–º mismatch —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

const totalCoincidences = coincidences.match.length + coincidences.mismatch.length;

// üîπ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
const rateEnemy = gameObj.get("rateEnemy") || 0;
const rateCreator = gameObj.get("rateCreator") || 0;

// üîπ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
const resultEnemy = rateEnemy <= totalCoincidences ? rateEnemy : 0;
const resultCreator = rateCreator <= totalCoincidences ? rateCreator : 0;

// üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
let winnerId = null;
let winnerName = null;

if (resultCreator > resultEnemy) {
winnerId = gameObj.get("creatorId");
winnerName = gameObj.get("creatorName");
} else if (resultEnemy > resultCreator) {
winnerId = gameObj.get("enemyId");
winnerName = gameObj.get("enemyName");
}
const creatorId = gameObj.get("creatorId");
const enemyId = gameObj.get("enemyId")

gameObj.set("coincidences", coincidences);
gameObj.set("resultCreator", resultCreator);
gameObj.set("resultEnemy", resultEnemy);
gameObj.set("winnerId", winnerId);
gameObj.set("winnerName", winnerName);
gameObj.set("status", "finish");

await gameObj.save();


// üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
let message = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüéñ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* ${winnerName}\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\``;

if (gameObj.get('creatorId')) {
  let creatorMessage = message;
  if (gameObj.get('creatorId') === winnerId) {
      creatorMessage += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!`;
  } else if (winnerId) {
      creatorMessage += `\nüòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`;
  } else {
      creatorMessage = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\nü§ù –ù–∏—á—å—è!`;
  }
  await bot.telegram.sendMessage(gameObj.get('creatorId'), creatorMessage, { parse_mode: 'Markdown' }).catch(() => {});
}

if (gameObj.get('enemyId')) {
  let enemyMessage = message;
  if (gameObj.get('enemyId') === winnerId) {
      enemyMessage += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!`;
  } else if (winnerId) {
      enemyMessage += `\nüòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`;
  } else {
      enemyMessage = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\nü§ù –ù–∏—á—å—è!`;
  }
  await bot.telegram.sendMessage(gameObj.get('enemyId'), enemyMessage, { parse_mode: 'Markdown' }).catch(() => {});

}
delete userSessions[userId];

}

async function deleteOldGames() {
  try {
      const Game = Parse.Object.extend("Games");
      const query = new Parse.Query(Game);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–≤—É—Ö–¥–Ω–µ–≤–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
      const twoDaysAgo = new Date();
      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥ –∏ –Ω–µ –∏–º–µ—é—â–∏–µ —Å—Ç–∞—Ç—É—Å "finish"
      query.lessThan("updatedAt", twoDaysAgo);
      query.notEqualTo("status", "finish");

      const oldGames = await query.find();
      
      if (oldGames.length > 0) {
          console.log(`üóë –ù–∞–π–¥–µ–Ω–æ ${oldGames.length} —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...`);
          for (const game of oldGames) {
              await game.destroy();
              console.log(`‚úÖ –ò–≥—Ä–∞ ${game.id} —É–¥–∞–ª–µ–Ω–∞`);
          }
      } else {
          console.log("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
      }
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
setInterval(deleteOldGames, 240 * 60 * 1000); // 4 —á–∞—Å–∞

bot.start((ctx) => {
  userSessions[ctx.from.id] = {
    step: null,
    matchValues: [],
    mismatchValues: [],
  };
  ctx.reply(
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ¬´–°–æ–≤–ø–∞–¥–µ–Ω–∏—è¬ª!\n\nüìú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤–æ–µ (–Ω–∏–∂–Ω–µ–µ) –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.",
    Markup.keyboard([
      ["üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"],
      ["üõ†Ô∏è –¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã"],
      ["üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"],
    ])
      .resize()
      .oneTime()
  );
});

bot.hears("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥", async (ctx) => {
  await ctx.replyWithMarkdown(
    `üìù *–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:*\n\n` +
      `‚ñ∂Ô∏è */start* ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n` +
      `üõ†Ô∏è */current_games* ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä.\n` +
      `üõ†Ô∏è */finished_games* ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä.\n` +
      `‚öîÔ∏è */create_game* ‚Äì –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.\n` +
      `üë• */join_game* ‚Äì –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ.\n` +
      `üìú */rules* ‚Äì –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.`
  );
});

bot.hears("üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "create_game",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.hears("üìÇ –ú–æ–∏ –∏–≥—Ä—ã", async (ctx) => {
  await bot.handleUpdate({
    callback_query: { data: "my_games", from: ctx.from, message: ctx.message },
  });
});

bot.hears("üõ†Ô∏è –¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã", async (ctx) => {
  await bot.handleUpdate({
    callback_query: { data: "current_games", from: ctx.from, message: ctx.message },
  });
});

bot.hears("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã", async (ctx) => {
  await bot.handleUpdate({
    callback_query: { data: "finished_games", from: ctx.from, message: ctx.message },
  });
});

bot.hears("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", async (ctx) => {
  await bot.handleUpdate({
    callback_query: { data: "join_game", from: ctx.from, message: ctx.message },
  });
});

bot.hears("üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", async (ctx) => {
  await bot.handleUpdate({
    callback_query: { data: "rules", from: ctx.from, message: ctx.message },
  });
});

bot.command("my_games", async (ctx) => {
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üéÆ –¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã", "current_games")],
      [Markup.button.callback("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã", "finished_games")],
    ])
  );
});

bot.command("create_game", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "create_game",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.command("current_games", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "current_games",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.command("finished_games", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "finished_games",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.command("join_game", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "join_game",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.command("rules", async (ctx) => {
  await bot.handleUpdate({
    callback_query: {
      data: "rules",
      from: ctx.from,
      message: ctx.message,
    },
  });
});

bot.action("rules", (ctx) => {
  ctx.reply(`–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ ¬´–°–æ–≤–ø–∞–¥–µ–Ω–∏—è¬ª:
–ò–≥—Ä–æ–∫–∞–º –¥–∞—ë—Ç—Å—è –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø–µ—Ä–≤–∞—è - –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—Ç–æ—Ä–∞—è - –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.
–í –∏–≥—Ä–µ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å (–ø–æ –æ–¥–Ω–æ–º—É) 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏–π, –∏–º–µ–Ω, —Å–ª–æ–≤, —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–π –∏ —Ç. –¥.) –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º.
–í –∏–≥—Ä–µ –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º.
–ü–æ—Å–ª–µ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∏ –¥–µ–ª–∞—é—Ç —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç–∞–≤–∏–ª.
–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –æ—á–∫–æ–≤.
–ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤.
–ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É (—Å–æ —Å–≤–æ–∏–º–∏ —Ç–µ–º–∞–º–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏) –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
–ò–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–µ.
–ò–≥—Ä–æ–∫, —Å–æ–∑–¥–∞–≤—à–∏–π –∏–≥—Ä—É —è–≤–ª—è–µ—Ç—Å—è –≤–µ–¥—É—â–∏–º –∏ —Å—É–¥—å—ë–π –∏–≥—Ä—ã.
–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!
`);
});

bot.action("my_games", async (ctx) => {
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üéÆ –¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã", "current_games")],
      [Markup.button.callback("‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã", "finished_games")],
    ])
  );
});

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.action("current_games", (ctx) => displayGames(ctx, null));

bot.action("finished_games", (ctx) => displayGames(ctx, "finish"));

bot.action("create_game", async (ctx) => {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend("Games");
  const query1 = new Parse.Query(Game);
  query1.equalTo("creatorId", userId);
  query1.notEqualTo("status", "finish"); // üîπ –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä—ã

  const query2 = new Parse.Query(Game);
  query2.equalTo("enemyId", userId);
  query2.notEqualTo("status", "finish");

  const mainQuery = Parse.Query.or(query1, query2);

  try {
    const currentGamesCount = await mainQuery.count(); // üîπ –ü–æ–¥—Å—á—ë—Ç —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä
    if (currentGamesCount >= 10) {
      return ctx.reply(
        "‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10 —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–≥—Ä, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é!"
      );
    }

    // üîπ –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    userSessions[userId] = {
      step: "choose_theme",
      matchValues: [],
      mismatchValues: [],
    };
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã:",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úèÔ∏è –°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "custom_theme")],
        [Markup.button.callback("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "random_theme")],
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.action("join_game", (ctx) => {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
    Markup.inlineKeyboard([
      [Markup.button.callback("üßë‚Äçü§ù‚Äçüßë –í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É", "enter_game_id")],
      [Markup.button.callback("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫", "random_opponent")],
    ])
  );
});

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É" (–≤–≤–æ–¥ ID)
bot.action("enter_game_id", (ctx) => {
  userSessions[ctx.from.id] = { step: "enter_game_id" };
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:");
});

bot.action("custom_theme", (ctx) => {
  userSessions[ctx.from.id] = {
    step: "enter_custom_theme",
    matchValues: [],
    mismatchValues: [],
    isRandom: false,
  };
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"
bot.action("random_theme", async (ctx) => {
  const theme = await getRandomTheme();
  userSessions[ctx.from.id] = {
    step: "enter_match_values",
    theme,
    matchValues: [],
    mismatchValues: [],
    isRandom: true, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isRandom = true –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º–µ
  };
  const message =
    `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
    `<b>${theme}</b>\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;

  await ctx.reply(message, { parse_mode: "HTML" });

});

bot.action("random_opponent", async (ctx) => {
  const userId = ctx.from.id;
  const Game = Parse.Object.extend("Games");
  const query = new Parse.Query(Game);

  try {
    // üîπ –ü–æ–∏—Å–∫ –∏–≥—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º waiting, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
    query.equalTo("status", "waiting");
    query.equalTo("visibility", true);
    query.notEqualTo("creatorId", userId);
    query.doesNotExist("enemyId");
    query.limit(1);

    const availableGames = await query.find();

    if (availableGames.length === 0) {
      return ctx.reply(
        "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é!"
      );
    }

    const game = availableGames[0];
    userSessions[userId] = {
      step: "enter_match_values_enemy",
      game,
      theme: game.get("MatchTheme"),
      alternateTheme: game.get("MismatchTheme"),
      matchValues: [],
      mismatchValues: [],
    };
    const message =
      `üéÆ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º!\n` +
      `üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: \n` + 
      `<b>${game.get("MatchTheme")}</b>\n` +
      `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;
    // ctx.reply(`üéÆ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º!\n\nüìå –¢–µ–º–∞ –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${game.get('MatchTheme')}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`);
    await ctx.reply(message, { parse_mode: "HTML" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã:", error);
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.action(/^game_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const Game = Parse.Object.extend("Games");
  const query = new Parse.Query(Game);

  try {
    const game = await query.get(gameId);
    if (!game) {
      return ctx.answerCbQuery("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", { show_alert: true });
    }

    const creatorId = game.get("creatorId");
    const creatorName = game.get("creatorName").replace(
      /[-._]/g,
      "\\$&"
    ) || "–ê–Ω–æ–Ω–∏–º";
    const enemyName = game.get("enemyName").replace(
      /[-._]/g,
      "\\$&"
    ) || "–û–∂–∏–¥–∞–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞";
    const status = game.get("status");
    const enemyId = game.get("enemyId");

    if (status === "waiting" && userId !== creatorId) {
      return ctx.answerCbQuery("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–µ–¥—É—â–µ–≥–æ...", { show_alert: true });
    } else if (status === "waiting" && userId === creatorId) {
      return ctx.answerCbQuery("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", {
        show_alert: true,
      });
    } else if (userId === creatorId && status === "full") {
      const matchTheme = (game.get("MatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞").replace(
        /[-._]/g,
        "\\$&"
      );
      const matchValuesCreator = (game.get("MatchValuesCreator") || []).map(
        (v) => v.replace(/[-._]/g, "\\$&")
      );
      const mismatchTheme = (game.get("MismatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞").replace(
        /[-._]/g,
        "\\$&"
      );
      const mismatchValuesCreator = (
        game.get("MismatchValuesCreator") || []
      ).map((v) => v.replace(/[-._]/g, "\\$&"));
      const rateCreator = (game.get("rateCreator") || "–ù–µ —Å–¥–µ–ª–∞–Ω–∞")
        .toString()
        .replace(/[-._]/g, "\\$&");

      ctx.answerCbQuery("üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", { show_alert: false });

      const message =
        `üéÆ *–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:*\n\n` +
        `üÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\n` +
        `üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${creatorName}\n` +
        `üé≠ *–°–æ–ø–µ—Ä–Ω–∏–∫:* ${enemyName}\n` +
        // `‚öñÔ∏è *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:* ${rateCreator}\n\n` +
        `üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *${matchTheme}\n*` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `üìã *–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n` +
        matchValuesCreator.map((v, i) => `${i + 1}\\.\ ${v}`).join("\n") +
        "\n\n" +
        `üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: *${mismatchTheme}\n*` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `üìã *–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n` +
        mismatchValuesCreator.map((v, i) => `${i + 1}\\.\ ${v}`).join("\n");

      // await ctx.replyWithMarkdownV2(message, {
      //   reply_markup: {
      //     inline_keyboard: [
      //       [{ text: "üí∞ –°–î–ï–õ–ê–¢–¨ –°–¢–ê–í–ö–£", callback_data: `bet_${gameId}` }],
      //     ],
      //   },
      // });

      await ctx.replyWithMarkdown(
        message,
        Markup.inlineKeyboard([
          [Markup.button.callback("üí∞ –°–î–ï–õ–ê–¢–¨ –°–¢–ê–í–ö–£", `bet_${gameId}`)],
        ])
      );

    } else if (userId === creatorId && status === "working") {
      // const theme1 = game.get("MatchTheme").replace(
      //   /[-._]/g,
      //   "\\$&"
      // ) || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      // const theme2 = game.get("MismatchTheme").replace(
      //   /[-._]/g,
      //   "\\$&"
      // ) || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      // const matchValuesCreator = game.get("MatchValuesCreator") || [];
      // const mismatchValuesCreator = game.get("MismatchValuesCreator") || [];
      // const matchValuesEnemy = game.get("matchValuesEnemy") || [];
      // const mismatchValuesEnemy = game.get("mismatchValuesEnemy") || [];
      // const rateCreator = game.get("rateCreator") || "–ù–µ —Å–¥–µ–ª–∞–Ω–∞";
      // const rateEnemy = game.get("rateEnemy") || "–ù–µ —Å–¥–µ–ª–∞–Ω–∞";

      const theme1 = (game.get("MatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞").replace(
        /[-._]/g,
        "\\$&"
      );
      const matchValuesCreator = (game.get("MatchValuesCreator") || []).map(
        (v) => v.replace(/[-._]/g, "\\$&")
      );
      

      ctx.answerCbQuery("üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", { show_alert: false });

      const message =
        `üéÆ <b>–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n` +
        `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
        `üë§ <b>–°–æ–ø–µ—Ä–Ω–∏–∫:</b> ${enemyName}\n` +
        `<b>üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b> ${theme1}\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
        `<b>–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n` +
        matchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join("\n") +
        "\n\n" +
        `<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b>\n` +
        matchValuesEnemy.map((v, i) => `${i + 1}. ${v || "-"}`).join("\n") +
        "\n\n";

      await ctx.reply(message, { parse_mode: "HTML" });

      // üîπ –ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      userSessions[userId] = {
        step: "enter_coincidences_match",
        gameId,
        theme: theme1,
        coincidences: [],
        matchValuesCreator,
        matchValuesEnemy,
      };

      await ctx.reply(
        `–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>${theme1}</b>\n\n`,
        {
          parse_mode: "HTML",
        }
      );

      await ctx.reply(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ) –Ω–µ—Ç!",
        Markup.inlineKeyboard([
          [Markup.button.callback("‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨", `finish_match_${gameId}`)],
        ])
      );
    } else if (status === "finish") {
      const theme1 = game.get("MatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      const theme2 = game.get("MismatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      const matchValuesCreator = game.get("MatchValuesCreator") || [];
      const mismatchValuesCreator = game.get("MismatchValuesCreator") || [];
      const matchValuesEnemy = game.get("matchValuesEnemy") || [];
      const mismatchValuesEnemy = game.get("mismatchValuesEnemy") || [];
      const coincidences = game.get("coincidences") || {
        match: [],
        mismatch: [],
      };
      const rateCreator =
        (game.get("rateCreator") || 0) + (creatorId === userId ? " (–≤—ã)" : "");
      const rateEnemy =
        (game.get("rateEnemy") || 0) + (enemyId === userId ? " (–≤—ã)" : "");
      const winnerName = game.get("winnerName")
        ? `${game.get("winnerName")}${
            game.get("winnerId") === userId ? " (–≤—ã)" : ""
          }`
        : "ü§ù –ù–∏—á—å—è!";

      const message =
        `üéÆ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:</b>\n\n` +
        `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b>\n` +
        `${theme1}\n\n` +
        `üìù <b>${creatorName}:</b>\n` +
        matchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join("\n") +
        "\n\n" +
        `üìù <b>${enemyName}:</b>\n` +
        matchValuesEnemy.map((v, i) => `${i + 1}. ${v}`).join("\n") +
        "\n\n" +
        `üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n` +
        (coincidences.match.length > 0 ? coincidences.match.join(", ") : "‚Äî") +
        "\n" +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b>\n` +
        `${theme2}\n\n` +
        `üìù <b>${creatorName}:</b>\n` +
        mismatchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join("\n") +
        "\n\n" +
        `üìù <b>${enemyName}:</b>\n` +
        mismatchValuesEnemy.map((v, i) => `${i + 1}. ${v}`).join("\n") +
        "\n\n" +
        `üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n` +
        (coincidences.mismatch.length > 0
          ? coincidences.mismatch.join(", ")
          : "‚Äî") +
        "\n" +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `‚öñÔ∏è <b>–°—Ç–∞–≤–∫–∞ –≤–µ–¥—É—â–µ–≥–æ:</b> ${rateCreator}\n` +
        `‚öñÔ∏è <b>–°—Ç–∞–≤–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b> ${rateEnemy}\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
        `üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${winnerName}`;

      await ctx.reply(message, { parse_mode: "HTML" });
    } else if (userId !== creatorId && status === "full") {
      ctx.answerCbQuery("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!..", { show_alert: true });
    } else if (status === "working" && userId !== creatorId) {
      ctx.answerCbQuery("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!..", { show_alert: true });
    } else {
      ctx.answerCbQuery("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∏–≥—Ä—ã.", {
        show_alert: true,
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã:", error);
    ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", { show_alert: true });
  }
});

bot.action(/^bet_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;

  const Game = Parse.Object.extend("Games");
  const query = new Parse.Query(Game);

  try {
    const game = await query.get(gameId);
    if (!game)
      return ctx.answerCbQuery("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", { show_alert: true });

    if (game.get("creatorId") !== userId) {
      return ctx.answerCbQuery("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∏–≥—Ä—ã.", {
        show_alert: true,
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å—Ç–∞–≤–∫–∏
    userSessions[userId] = { step: "enter_rate_creator", game };
    ctx.reply("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12):");
    ctx.answerCbQuery();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞–≤–∫–∏:", error);
    ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞!", { show_alert: true });
  }
});

bot.action(/^finish_match_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session || session.gameId !== gameId) return;
  const Game = Parse.Object.extend("Games");
  const query = new Parse.Query(Game);
  const game = await query.get(gameId);
  game.set('coincidences', { match: session.coincidences }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ë–î
    await game.save();

  session.matchCoincidences = [...session.coincidences]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–µ–º—ã
  session.coincidences = []; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç–µ–º—ã
  session.step = "enter_coincidences_mismatch";

  
  if (!game) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

  // üîπ –î–∞–Ω–Ω—ã–µ –ø–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–º–µ
  const theme2 = game.get("MismatchTheme") || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
  const mismatchValuesCreator = game.get("MismatchValuesCreator") || [];
  const mismatchValuesEnemy = game.get("mismatchValuesEnemy") || [];
  const enemyName = game.get("enemyName");

  ctx.answerCbQuery("üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", { show_alert: false });

  const message =
    `üéÆ <b>–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n` +
    `üÜî <b>ID –∏–≥—Ä—ã:</b> <code>${gameId}</code>\n` +
    `üë§ <b>–°–æ–ø–µ—Ä–Ω–∏–∫:</b> ${enemyName}\n` +
    `üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</b> ${theme2}\n` +
    `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
    `<b>–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n` +
    mismatchValuesCreator.map((v, i) => `${i + 1}. ${v}`).join("\n") +
    "\n\n" +
    `<b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</b>\n` +
    mismatchValuesEnemy.map((v, i) => `${i + 1}. ${v || "-"}`).join("\n") +
    "\n\n";

  await ctx.reply(message, { parse_mode: "HTML" });

  await ctx.reply(
    `–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>${theme2}</b>\n\n`,
    {
      parse_mode: "HTML",
    }
  );

  await ctx.reply(
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ) –Ω–µ—Ç!",
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨", `finish_mismatch_${gameId}`)],
    ])
  );
});

bot.action(/^finish_mismatch_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session || session.gameId !== gameId) return;

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ –±–∞–∑—ã
  const Game = Parse.Object.extend("Games");
  const query = new Parse.Query(Game);
  const gameObj = await query.get(gameId);
  if (!gameObj) return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

  // üîπ –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const totalCoincidences =
    (session.matchCoincidences.length || 0) +
    (session.coincidences.length || 0);

  // üîπ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
  const rateEnemy = gameObj.get("rateEnemy") || 0;
  const rateCreator = gameObj.get("rateCreator") || 0;

  // üîπ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const resultEnemy = rateEnemy <= totalCoincidences ? rateEnemy : 0;
  const resultCreator = rateCreator <= totalCoincidences ? rateCreator : 0;

  // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  let winnerId = null;
  let winnerName = null;

  if (resultCreator > resultEnemy) {
    winnerId = gameObj.get("creatorId");
    winnerName = gameObj.get("creatorName");
  } else if (resultEnemy > resultCreator) {
    winnerId = gameObj.get("enemyId");
    winnerName = gameObj.get("enemyName");
  }

  // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
  gameObj.set("coincidences", {
    match: session.matchCoincidences || [],
    mismatch: session.coincidences || [],
    total: totalCoincidences,
  });

  const creatorId = gameObj.get("creatorId");
 const enemyId = gameObj.get("enemyId")
  gameObj.set("resultCreator", resultCreator);
  gameObj.set("resultEnemy", resultEnemy);
  gameObj.set("winnerId", winnerId);
  gameObj.set("winnerName", winnerName);
  gameObj.set("status", "finish");

  await gameObj.save();

  // üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
  let message = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüéñ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* ${winnerName}\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\``;

  if (gameObj.get('creatorId')) {
      let creatorMessage = message;
      if (gameObj.get('creatorId') === winnerId) {
          creatorMessage += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!`;
      } else if (winnerId) {
          creatorMessage += `\nüòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`;
      } else {
        creatorMessage = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\nü§ù –ù–∏—á—å—è!`;
      }
      await bot.telegram.sendMessage(gameObj.get('creatorId'), creatorMessage, { parse_mode: 'Markdown' }).catch(() => {});
      // await openGame(ctx, gameId);
  }

  if (gameObj.get('enemyId')) {
      let enemyMessage = message;
      if (gameObj.get('enemyId') === winnerId) {
          enemyMessage += `\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!`;
      } else if (winnerId) {
          enemyMessage += `\nüòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`;
      } else {
        enemyMessage = `üèÜ *–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∏–≥—Ä—ã!\nüÜî *ID –∏–≥—Ä—ã:* \`${gameId}\`\nü§ù –ù–∏—á—å—è!`;
      }
      await bot.telegram.sendMessage(gameObj.get('enemyId'), enemyMessage, { parse_mode: 'Markdown' }).catch(() => {});
      // await openGame(ctx, gameId);
  }

  delete userSessions[userId];
});


bot.action(/^delete_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//   await ctx.replyWithMarkdownV2(
//     `‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É —Å ID \`${gameId.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&')}\`?`
// );

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
await ctx.reply(
    `‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É —Å ID \`${gameId.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&')}\`?`,
    Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${gameId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete`)]
    ])
);
});

bot.action(/^confirm_delete_(.+)$/, async (ctx) => {
  const gameId = ctx.match[1];
  const userId = ctx.from.id;

  const Game = Parse.Object.extend('Games');
  const query = new Parse.Query(Game);

  try {
      const game = await query.get(gameId);

      if (!game) {
          return ctx.answerCbQuery('‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', { show_alert: true });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã
      if (game.get('creatorId') !== userId) {
          return ctx.answerCbQuery('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∏–≥—Ä—ã.', { show_alert: true });
      }

      await game.destroy();
      await ctx.reply('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
      return displayGames(ctx);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
  }
});

// bot.action("cancel_delete", async (ctx) => {
//   await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
//   await ctx.editMessageReplyMarkup(null); // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
// });

bot.action("cancel_delete", async (ctx) => {
  try {
      await ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è)

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è" (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ message_id)
      if (ctx.session.deletePromptMessageId) {
          await ctx.telegram.deleteMessage(ctx.chat.id, ctx.session.deletePromptMessageId);
          delete ctx.session.deletePromptMessageId; // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
      }
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
  }
});

bot.action(['visibility_true', 'visibility_false'], async (ctx) => {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session) return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');

  const visibility = ctx.match[0] === 'visibility_true'; // –ï—Å–ª–∏ "–î–∞" ‚Üí true, –µ—Å–ª–∏ "–ù–µ—Ç" ‚Üí false

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  const Game = Parse.Object.extend('Games');
  const game = new Game();
  game.set('MatchTheme', session.theme);
  game.set('MismatchTheme', session.alternateTheme);
  game.set('MatchValuesCreator', session.matchValues);
  game.set('MismatchValuesCreator', session.mismatchValues);
  game.set('creatorId', userId);
  game.set('creatorName', ctx.from.username || ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º');
  game.set('status', 'waiting');
  game.set('visibility', visibility);

  await game.save();
  const message = `‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ` + `<code>${game.id}</code>\nüëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: ${visibility ? '–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö' : '—Å–∫—Ä—ã—Ç–∞'}`;
  await ctx.reply(message, { parse_mode: "HTML" });
  
  // ctx.reply(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: \`${game.id}\`\nüëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: ${visibility ? '–î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö' : '–°–∫—Ä—ã—Ç–∞'}`);
  delete userSessions[userId];




  //////////////////////////////////////////
  // const Game = Parse.Object.extend("Games");
  //       const game = new Game();
  //       game.set("MatchTheme", session.theme);
  //       game.set("MismatchTheme", session.alternateTheme);
  //       game.set("MatchValuesCreator", session.matchValues);
  //       game.set("MismatchValuesCreator", session.mismatchValues);
  //       game.set("creatorId", ctx.from.id);
  //       game.set(
  //         "creatorName",
  //         ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º"
  //       );
  //       game.set("status", "waiting");
  //       await game.save();
  //       const message = `‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ` + `<code>${game.id}</code>`;
  //       await ctx.reply(message, { parse_mode: "HTML" });
  //       delete userSessions[ctx.from.id];
    ///////////////////////////////////////////
});



bot.on("text", async (ctx) => {
  const session = userSessions[ctx.from.id];
  if (!session) return;
  if (!session || !session.step)
    return ctx.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start");
  // üîπ –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  switch (session.step) {
    case "enter_custom_theme":
      session.theme = ctx.message.text;
      session.step = "enter_match_values";
      const message =
    `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
    `<b>${session.theme}</b>\n` +
    `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;
    ctx.reply(message, { parse_mode: "HTML" });
      break;

    case "enter_match_values":
      session.matchValues.push(ctx.message.text);
      if (session.matchValues.length < 6) {
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (${session.matchValues.length + 1}/6):`
        );
      } else {
        if (session.isRandom) {
          // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –∏–∑ –±–∞–∑—ã, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é —Ç–æ–∂–µ –∏–∑ –±–∞–∑—ã
          session.alternateTheme = await getRandomTheme();
          session.step = "enter_mismatch_values";
          const message =
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
            `<b>${session.alternateTheme}</b>\n` +
            `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;

          await ctx.reply(message, { parse_mode: "HTML" });
        } else {
          // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —É –Ω–µ–≥–æ
          session.step = "enter_new_custom_theme";
          ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:");
        }
      }
      break;

    case "enter_new_custom_theme":
      session.alternateTheme = ctx.message.text;
      session.step = "enter_mismatch_values";
      const message2 =
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
            `<b>${session.alternateTheme}</b>\n` +
            `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;

        ctx.reply(message2, { parse_mode: "HTML" });
      
      break;

    case "enter_mismatch_values":
      session.mismatchValues.push(ctx.message.text);
      if (session.mismatchValues.length < 6) {
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (${session.mismatchValues.length + 1}/6):`
        );
      } else {
        await ctx.reply(
          'üëÄ –°–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É –≤–∏–¥–∏–º–æ–π –¥–ª—è –≤—Å–µ—Ö?',
            Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –î–ê', 'visibility_true')],
                [Markup.button.callback('‚ùå –ù–ï–¢', 'visibility_false')]
            ])
      );

        // const Game = Parse.Object.extend("Games");
        // const game = new Game();
        // game.set("MatchTheme", session.theme);
        // game.set("MismatchTheme", session.alternateTheme);
        // game.set("MatchValuesCreator", session.matchValues);
        // game.set("MismatchValuesCreator", session.mismatchValues);
        // game.set("creatorId", ctx.from.id);
        // game.set(
        //   "creatorName",
        //   ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º"
        // );
        // game.set("status", "waiting");
        // await game.save();
        // const message = `‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ` + `<code>${game.id}</code>`;
        // await ctx.reply(message, { parse_mode: "HTML" });
        // delete userSessions[ctx.from.id];
      }
      break;

    case "enter_game_id":
      const gameId = ctx.message.text;
      const Game = Parse.Object.extend("Games");
      const query = new Parse.Query(Game);

      try {
        const game = await query.get(gameId);
        const creatorId = game.get("creatorId");
        const enemyId = game.get("enemyId");
        const status = game.get("status");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
        if (creatorId === ctx.from.id || enemyId === ctx.from.id) {
          return ctx.reply(
            "‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
          );
        }

        session.game = game;
        session.theme = game.get("MatchTheme");
        session.alternateTheme = game.get("MismatchTheme");
        session.matchValues = [];
        session.mismatchValues = [];
        session.step = "enter_match_values_enemy";

        const message =
          `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!\n` +
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
          `<b>${session.theme}</b>\n` +
          `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;

        await ctx.reply(message, { parse_mode: "HTML" });
      } catch (error) {
        ctx.reply("‚ö†Ô∏è –¢–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID!");
      }
      break;

    case "enter_match_values_enemy":
      session.matchValues.push(ctx.message.text);
      if (session.matchValues.length < 6) {
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (${session.matchValues.length + 1}/6):`
        );
      } else {
        session.step = "enter_mismatch_values_enemy";
        const message =
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:\n` +
          `<b>${session.alternateTheme}</b>\n` +
          `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: `;

        await ctx.reply(message, { parse_mode: "HTML" });
      }
      break;

    case "enter_mismatch_values_enemy":
      session.mismatchValues.push(ctx.message.text);
      if (session.mismatchValues.length < 6) {
        ctx.reply(
          `–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (${session.mismatchValues.length + 1}/6):`
        );
      } else {
        session.step = "enter_rate_enemy";
        ctx.reply(
          "üí∞ –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12):"
        );
      }
      break;

    case "enter_rate_enemy":
      const rate = parseInt(ctx.message.text);

      if (isNaN(rate) || rate < 0 || rate > 12) {
        return ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12:");
      }

      const game = session.game;
      game.set("matchValuesEnemy", session.matchValues);
      game.set("mismatchValuesEnemy", session.mismatchValues);
      game.set("enemyId", ctx.from.id);
      game.set(
        "enemyName",
        ctx.from.username || ctx.from.first_name || "–ê–Ω–æ–Ω–∏–º"
      );
      game.set("rateEnemy", rate);
      game.set("status", "full");

      await game.save();

      await ctx.reply(
        `‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: ${rate}.\n –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤–µ–¥—É—â–µ–≥–æ!`
      );

      // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
    if (game.get('creatorId')) {
      await bot.telegram.sendMessage(
          game.get('creatorId'),
          `üë• *–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä—ã!`,
          { parse_mode: 'Markdown' }
      ).catch(() => {});
  }

      delete userSessions[ctx.from.id];
      break;

    case "enter_rate_creator":
      const rateCreator = parseInt(ctx.message.text);

      if (isNaN(rateCreator) || rateCreator < 0 || rateCreator > 12) {
        return ctx.reply("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12:");
      }

      const gameCreator = session.game;

      // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
      if (gameCreator.get("rateCreator") !== undefined) {
        return ctx.reply(
          "‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É! –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
        );
      }

      gameCreator.set("rateCreator", rateCreator);
      gameCreator.set("status", "working"); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
      await gameCreator.save();

      await ctx.reply(`‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${rateCreator} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –í–∞—à —Ö–æ–¥!`);
      // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫—É
    if (gameCreator.get('enemyId')) {
      await bot.telegram.sendMessage(
          gameCreator.get('enemyId'),
          `üéØ *–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É!*`,
          { parse_mode: 'Markdown' }
      ).catch(() => {});
  }
      delete userSessions[ctx.from.id];

      // üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
      return displayGames(ctx);
      break;

      case 'enter_coincidences_match':
    session.coincidences.push(ctx.message.text);
    ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ctx.message.text} (${session.coincidences.length}/6)`);
    if (session.coincidences.length < 6) {
        ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ) –Ω–µ—Ç!",
            Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  "‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨",
                  `finish_match_${session.gameId}`
                ),
              ],
            ])
          );
    }
    
    // üîπ –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 6 –∑–Ω–∞—á–µ–Ω–∏–π, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ finish_match –≤—Ä—É—á–Ω—É—é
    if (session.coincidences.length >= 6) {
        await ctx.reply('‚úÖ –í—ã –≤–≤–µ–ª–∏ 6 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ –Ω–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ...');
        const Game = Parse.Object.extend("Games");
    const query = new Parse.Query(Game);
    const game = await query.get(session.gameId);
    game.set('coincidences', { match: session.coincidences }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ë–î
    await game.save();
        return finishMatch(ctx, session.gameId);
    }
    break;

    case 'enter_coincidences_mismatch':
    session.coincidences.push(ctx.message.text);
    ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${ctx.message.text} (${session.coincidences.length}/6)`);
    if (session.coincidences.length < 6) {
        ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª—å—à–µ) –Ω–µ—Ç!",
            Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  "‚úÖ –ó–ê–ö–û–ù–ß–ò–¢–¨",
                  `finish_mismatch_${session.gameId}`
                ),
              ],
            ])
          );
    }

    // üîπ –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 6 –∑–Ω–∞—á–µ–Ω–∏–π, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ finish_mismatch –≤—Ä—É—á–Ω—É—é
    if (session.coincidences.length >= 6) {
        ctx.reply('‚úÖ –í—ã –≤–≤–µ–ª–∏ 6 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É...');
        return finishMismatch(ctx, session.gameId);
    }
    break;

    default:
      ctx.reply("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start");
  }
});

// bot.telegram.deleteWebhook();
// bot.startPolling();



if (process.env.BOT_DISABLED === 'true') {
    console.log('–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.');
    process.exit(0); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
}

bot.launch().then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ"));

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));